#!/bin/bash


execpath=`dirname $0`
execpath=`realpath $execpath`

#dependencies: fsl bedpostx
#precondition: 

function usage {
 echo "Writes output to dwi/<in_dwi_name>/bedpost.bedpostX/probtrack"
 echo "Usage $0 <in_bedpost_dir> <out_track_dir> <nprobseeds> <atlas_label_nii> <atlas_label_csv> <atlas_space> <ncpus> <out_connectivity_csv> <additional_matrices> <subjid/list>"

}

if [ "$#" -lt 6 ]
then
    usage
    exit 1
fi

output_dir=`pwd`
in_bedpost_root=$1
out_name=$2
nprobseeds=$3
atlas_label_nii=$4
atlas_label_csv=$5
atlas_space=$6
ncpus=$7
out_conn_csv=$8
matrix=$9
threshold=$10
shift 10

if [ -f $1 ]
then
 subjids=`cat $1`
else
 subjids=$1
fi

t1_img_type=t1/t1.brain.inorm.nii.gz

#comment these two tines when running in graham. This is just to test in a local machine.	
#mkdir -p test_dir/
#scratch_dir=test_dir

for subj in $subjids
do


  #import atlas_label_nii file  -> imports to labelgroup "imported"
     #or:  
   #existing label-group and nii filename
 
   atlas_label_name=${atlas_label_nii##*/}
   atlas_label_name=${atlas_label_name%%.nii*}

   #If the participant 2 level was not run once
   if [ ! -e "$out_conn_csv" ];  
     then


    bedpost_dir=$in_bedpost_root/$subj
    if [ -n "$scratch_dir" ] #if running on compute cluster, use scratch dir
    then
       out_track_dir=$scratch_dir/$subj/$out_name
   else
   out_track_dir=$in_bedpost_root/$subj/$out_name
   fi
   mkdir -p $out_track_dir



   mkdir -p $atlas_space/labels/t1/imported
   cp -v $atlas_label_nii $atlas_space/labels/t1/imported

    echo $execpath/propLabels_reg_bspline_f3d t1 $t1_img_type imported $atlas_space $subj
    $execpath/propLabels_reg_bspline_f3d t1 $t1_img_type imported $atlas_space $subj

   atlas_t1=$subj/labels/t1/imported_bspline_f3d_${atlas_space}/${atlas_label_name}.nii.gz


   mask_file=$bedpost_dir/nodif_brain_mask.nii.gz

   
   targets_all_txt=$out_track_dir/targets.txt
   mkdir -p $out_track_dir/targets
   rm -f $targets_all_txt



   for line in `cat $atlas_label_csv`
   do
       label=${line%,*}
       index=${line##*,}
      
       index_pad=`printf  %03d $index`
       extracted=$out_track_dir/targets/$index_pad.$label.nii.gz
       echo fslmaths $atlas_t1 -thr $index -uthr $index $extracted
       fslmaths $atlas_t1 -thr $index -uthr $index $extracted

       realpath $extracted >> $targets_all_txt

       #resample to dwi space  -- not needed??
       echo reg_resample -flo $extracted -res $extracted -ref $mask_file -NN 0
       reg_resample -flo $extracted -res $extracted -ref $mask_file -NN 0
    done


   run_file=$out_track_dir/probtrack.cmd
   rm -f $run_file

   labellist=""
   for line in `cat $atlas_label_csv`
   do
       label=${line%,*}
       index=${line##*,}
      
       if [ "$labellist" = "" ]
       then
        labellist=$label
       else 
         labellist="$labellist,$label"
       fi

       index_pad=`printf  %03d $index`
       extracted=$out_track_dir/targets/$index_pad.$label.nii.gz

       out_seed_track=$out_track_dir/$index_pad.$label
       mkdir -p $out_seed_track

       seed_txt=$out_seed_track/seeds.txt

       realpath $extracted > $seed_txt

   
     samples_base=$bedpost_dir/merged
     probtrack_opts="-l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P $nprobseeds --fibthresh=0.01 --distthresh=0.0  --sampvox=0.0 --forcedir --opd"
     echo probtrackx2 --seed=$seed_txt --targetmasks=$targets_all_txt -m $mask_file -s $samples_base --dir=$out_seed_track $probtrack_opts --os2t --s2tastext  >>  $run_file
     
     done  #seed

################################################################################################################################################
#Running probtrackx with 200 seeds to get the nifty files for each connection
	for seed_points in `cat $targets_all_txt`  #Looping through seeding points
   	do
		seed_label=${seed_points##*/}
		seed_label=${seed_label%%.nii*}
	
		for target in `cat $targets_all_txt`  #Looping through target points
   		do
			roi=${target##*/}
			roi=${roi%%.*}
			mkdir -p $scratch_dir/$subj/fdt_${atlas_label_name}/$seed_label/$roi

			probtrack_opts="-l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P 200 --fibthresh=0.01 --distthresh=0.0  --sampvox=0.0 --forcedir --opd "
			echo probtrackx2 --seed=$seed_points --waypoints=$target -m $mask_file -s $samples_base --dir=$scratch_dir/$subj/fdt_${atlas_label_name}/$seed_label/$roi --out=fdt_$roi.nii.gz $probtrack_opts >>  $run_file
		done
 	 done
#End of saving tracks
#################################################################################################################################################### 
    parallel --progress -j $ncpus < $run_file


    #now, need to 1) average over rows for matrix_seeds_to_all_targets in each seed dir, then concatenate all together

    echo $labellist > $out_conn_csv

    out_matrix=$
    for line in `cat $atlas_label_csv`
    do
       label=${line%,*}
       index=${line##*,}
      
       index_pad=`printf  %03d $index`

       out_seed_track=$out_track_dir/$index_pad.$label

       #reduce all seeds to a single row by averaging
      octave --eval "dlmwrite('$out_seed_track/avg_seeds_to_all_targets.csv',mean(importdata('$out_seed_track/matrix_seeds_to_all_targets')./$nprobseeds,1))"
      
      cat $out_seed_track/avg_seeds_to_all_targets.csv >> $out_conn_csv
   done

else
	echo "Skipping the connectivity matrix generation assuming it is already completed. If you want to re run participation 2 elevel again, please delete the connectivity.csv file in the prepdwi folder and re run participant 2 level "

	echo "Unzipping the $in_bedpost_root/$subj/fdt_${atlas_label_name}.tar.gz file from the previous run and moving it to the $scratch_dir/$subj/ directory"
	pushd $in_bedpost_root/$subj	
	tar -xvzf fdt_${atlas_label_name}.tar.gz 
	sleep 2
	popd
	mkdir -p $scratch_dir/$subj/fdt_${atlas_label_name}
	mv $in_bedpost_root/$subj/fdt_${atlas_label_name} $scratch_dir/$subj/
	
fi
##########################################################################################################
#This section reads all the FA/MD(or as specified) image files in the prepdwi directory and generates matrices for mean and max value corresponding to that image for each connectivity.

   echo "Generating $matrix matrices."

   labellist2=""
   for line in `cat $atlas_label_csv`
   do
       label=${line%,*}
       index=${line##*,}
      
       if [ "$labellist2" = "" ]
       then
        labellist2=$label
       else 
         labellist2="$labellist2,$label"
       fi
   done
   #mkdir -p $scratch_dir/$subj/temp

   subject_dir=${subj%_*} #stripping the subject ID
   session_dir=${subj#*_} #stripping the session

   #Checking if there are any old csv files and deleting them.
   csv_files=../prepdwi/$subject_dir/$session_dir/dwi/*${matrix}_to_all_targets.csv
   if [[ $( ls -A $csv_files ) ]];  
     then
	echo "Deleting old matrix files."
	rm -rf ../prepdwi/$subject_dir/$session_dir/dwi/*${matrix}_to_all_targets.csv
     else
	echo "There are no existing matrices. Let's create them!"
   fi


   #Adding the header to the csv files and and aslo reading the FA/MD nifty file
   if [ ! -e "../prepdwi/$subject_dir/$session_dir" ];  #check if a session folder exists
     then
	echo $labellist2 >> ../prepdwi/$subject_dir/dwi/${subj}_${atlas_label_name}_mean_${matrix}_to_all_targets.csv
	echo $labellist2 >> ../prepdwi/$subject_dir/dwi/${subj}_${atlas_label_name}_max_${matrix}_to_all_targets.csv
	image=../prepdwi/$subject_dir/dwi/*$matrix.nii.gz
     else
  	echo $labellist2 >> ../prepdwi/$subject_dir/$session_dir/dwi/${subj}_${atlas_label_name}_mean_${matrix}_to_all_targets.csv
   	echo $labellist2 >> ../prepdwi/$subject_dir/$session_dir/dwi/${subj}_${atlas_label_name}_max_${matrix}_to_all_targets.csv
	image=../prepdwi/$subject_dir/$session_dir/dwi/*$matrix.nii.gz
    fi

   echo "Reading $matrix file and masking it with each connectivity. This will take around an hour to generate the matrices. You can check the progress in the csv files in the prepdwi folder. "
	
   	#labellist=""
   	for line in `cat $atlas_label_csv`
  	do
       		label=${line%,*}
      		index=${line##*,}
      
       		index_pad=`printf  %03d $index`

		connect_nifty=$index_pad.$label
		[ -d $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty ] || mkdir $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty  #Creating folders for each connectivity

		mean_matrix_line=""
		max_matrix_line=""
		for nifties in $(ls $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/*/*.gz)  #Going through all the nifty files generated for each connectivity
		do
			name=${nifties##*/}
			index=${name##*_}
			index=${index%%.*}
			thresh=$threshold
			fslmaths $nifties -thr $thresh $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/$name.nii.gz  #Threshoding 
			fslmaths $image -mas $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/$name.nii.gz $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/$name.nii.gz  #Masking with the image

			if [ "$index" == "$index_pad" ]; then
				mean_val=1
				Max_val=1
			else
			mean_val=$(fslstats $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/$name.nii.gz -M)  #Gets the non zero mean 
			max_val=$(fslstats $scratch_dir/$subj/fdt_${atlas_label_name}/$connect_nifty/$name.nii.gz -R)   #Gets the maximum value and the min
			Max_val=$(echo $max_val | awk '{print $2}') #Gets the max value (second line is the MAx)
			fi

			mean_matrix_line=${mean_matrix_line}${mean_val},
			max_matrix_line=${max_matrix_line}${Max_val},
		
		done
	


   	if [ ! -e "../prepdwi/$subject_dir/$session_dir" ];  
     		then
			echo $mean_matrix_line >> ../prepdwi/$subject_dir/dwi/${subj}_${atlas_label_name}_mean_${matrix}_to_all_targets.csv
			echo $max_matrix_line >> ../prepdwi/$subject_dir/dwi/${subj}_${atlas_label_name}_max_${matrix}_to_all_targets.csv
		else
			echo $mean_matrix_line >> ../prepdwi/$subject_dir/$session_dir/dwi/${subj}_${atlas_label_name}_mean_${matrix}_to_all_targets.csv
			echo $max_matrix_line >> ../prepdwi/$subject_dir/$session_dir/dwi/${subj}_${atlas_label_name}_max_${matrix}_to_all_targets.csv
	fi
	
    	done
	
	echo $matrix generation is completed.
   #done

rm $scratch_dir

echo "Compressing the $scratch_dir/$subj/fdt_${atlas_label_name} and deleting the original folder"
pushd $scratch_dir/$subj
tar -czf $in_bedpost_root/$subj/fdt_${atlas_label_name}.tar.gz fdt_${atlas_label_name}
rm -rf fdt_${atlas_label_name}
popd

# End of the matrix section
#######################################################################################################################



    if [ -n "$scratch_dir" ] #if running on compute cluster, use scratch dir
    then
        pushd $scratch_dir/$subj
        echo "backing up scratch folder to $in_bedpost_root/$subj/$out_name.tar"
        tar -cf $in_bedpost_root/$subj/$out_name.tar $out_name
        popd
    fi
done
