#!/bin/bash


execpath=`dirname $0`
execpath=`realpath $execpath`

#dependencies: fsl bedpostx
#precondition: 

function usage {
 echo "Writes output to dwi/<in_dwi_name>/bedpost.bedpostX/probtrack"
 echo "Usage $0 <in_bedpost_dir> <out_track_dir> <nprobseeds> <atlas_label_nii> <atlas_label_csv> <atlas_space> <ncpus> <out_connectivity_csv> <matrix_name> <matrix_nii> <subjid>"

}

if [ "$#" -lt 10 ]
then
    usage
    exit 1
fi

export OMP_NUM_THREADS=1
export MKL_NUM_THREADS=1

output_dir=`pwd`
in_bedpost_root=$1
out_name=$2
nprobseeds=$3
atlas_label_nii=$4
atlas_label_csv=$5
atlas_space=$6
ncpus=$7
out_conn_csv=$8
matrix=$9
matrix_nii=${10}
threshold=${11}
correct_pd=${12}
subj=${13}

#get name of _FA.csv matrix from the connectivity matrix name
out_matrix_mean_csv=${out_conn_csv%_*.csv}_stat-mean_${matrix}.csv
out_matrix_max_csv=${out_conn_csv%_*.csv}_stat-max_${matrix}.csv

if [ ! -e $out_conn_csv -o ! -e $out_matrix_mean_csv -o ! -e $out_matrix_max_csv ]
then


t1_img_type=t1/t1.brain.inorm.nii.gz



  #import atlas_label_nii file  -> imports to labelgroup "imported"
     #or:  
   #existing label-group and nii filename
 
   atlas_label_name=${atlas_label_nii##*/}
   atlas_label_name=${atlas_label_name%%.nii*}

   #If the participant 2 level was not run once
#   if [ ! -e "$out_conn_csv" ];  
#     then


   bedpost_dir=$in_bedpost_root/$subj
   if [ -n "$scratch_dir" ] #if running on compute cluster, use scratch dir
   then
       out_track_dir=$scratch_dir/$subj/$out_name
   else
   out_track_dir=$in_bedpost_root/$subj/$out_name
   fi
   mkdir -p $out_track_dir



   mkdir -p $atlas_space/labels/t1/imported
   cp -v $atlas_label_nii $atlas_space/labels/t1/imported

    $execpath/propLabels_reg_bspline_f3d t1 $t1_img_type imported $atlas_space $subj

   atlas_t1=$subj/labels/t1/imported_bspline_f3d_${atlas_space}/${atlas_label_name}.nii.gz


   mask_file=$bedpost_dir/nodif_brain_mask.nii.gz

   
   targets_all_txt=$out_track_dir/targets.txt
   mkdir -p $out_track_dir/targets
   rm -f $targets_all_txt



   for line in `cat $atlas_label_csv`
   do
       label=${line%,*}
       index=${line##*,}
      
       index_pad=`printf  %03d $index`
       extracted=$out_track_dir/targets/$index_pad.$label.nii.gz
       fslmaths $atlas_t1 -thr $index -uthr $index $extracted

       realpath $extracted >> $targets_all_txt

       #resample to dwi space  -- not needed??
       reg_resample -flo $extracted -res $extracted -ref $mask_file -NN 0
    done


   run_file=$out_track_dir/probtrack.cmd
   rm -f $run_file

   labellist=""
   for line in `cat $atlas_label_csv`
   do
       label=${line%,*}
       index=${line##*,}
      
       if [ "$labellist" = "" ]
       then
        labellist=$label
       else 
         labellist="$labellist,$label"
       fi

       index_pad=`printf  %03d $index`
       extracted=$out_track_dir/targets/$index_pad.$label.nii.gz

       out_seed_track=$out_track_dir/$index_pad.$label
       mkdir -p $out_seed_track

       seed_txt=$out_seed_track/seeds.txt
       targets_txt=$out_seed_track/targets.txt

       realpath $extracted > $seed_txt
       grep -v `realpath $extracted` $targets_all_txt > $targets_txt #targets are all but the seed
   
     samples_base=$bedpost_dir/merged
     probtrack_opts="-l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P $nprobseeds --fibthresh=0.01 --distthresh=0.0  --sampvox=0.0 --forcedir --opd --ompl"
     if [ "$correct_pd" = 1 ]
     then
	     probtrack_opts="$probtrack_opts --pd"
     fi
 
     echo probtrackx2 --seed=$seed_txt --targetmasks=$targets_all_txt -m $mask_file -s $samples_base --dir=$out_seed_track $probtrack_opts --os2t --s2tastext  >>  $run_file



     done  #seed



################################################################################################################################################
#Running probtrackx with 200 seeds to get the nifty files for each connection
	for seed_points in `cat $targets_all_txt`  #Looping through seeding points
   	do
		seed_label=${seed_points##*/}
		seed_label=${seed_label%%.nii*}
	
		for target in `cat $targets_all_txt`  #Looping through target points
   		do
			roi=${target##*/}
			roi=${roi%%.*}

			out_pathway_dir=$out_track_dir/pathways/$seed_label/$roi
			mkdir -p $out_pathway_dir

			probtrack_opts="-l --onewaycondition -c 0.2 -S 2000 --steplength=0.5 -P 200 --fibthresh=0.01 --distthresh=0.0  --sampvox=0.0 --forcedir --opd "
			     if [ "$correct_pd" = 1 ]
			     then
				     probtrack_opts="$probtrack_opts --pd"
			     fi
 
			echo probtrackx2 --seed=$seed_points --waypoints=$target -m $mask_file -s $samples_base --dir=$out_pathway_dir --out=fdt_$roi.nii.gz $probtrack_opts >>  $run_file
		done
 	 done
#End of saving tracks
#################################################################################################################################################### 
    parallel --progress -j $ncpus < $run_file


    #now, need to 1) average over rows for matrix_seeds_to_all_targets in each seed dir, then concatenate all together

    echo $labellist > $out_conn_csv

    for line in `cat $atlas_label_csv`
    do
       label=${line%,*}
       index=${line##*,}
      
       index_pad=`printf  %03d $index`

       out_seed_track=$out_track_dir/$index_pad.$label

       #reduce all seeds to a single row by averaging
      octave --eval "dlmwrite('$out_seed_track/avg_seeds_to_all_targets.csv',mean(importdata('$out_seed_track/matrix_seeds_to_all_targets')./$nprobseeds,1))"
      
      cat $out_seed_track/avg_seeds_to_all_targets.csv >> $out_conn_csv
   done

##########################################################################################################
#This section reads all the FA/MD(or as specified) image files in the prepdwi directory and generates matrices for mean and max value corresponding to that image for each connectivity.

   echo "Generating $matrix matrices."

   #mkdir -p $scratch_dir/$subj/temp

   echo $labellist > $out_matrix_mean_csv
   echo $labellist > $out_matrix_max_csv
  
   
	
   	#labellist=""
   	for line in `cat $atlas_label_csv`
  	do
       		label=${line%,*}
      		index=${line##*,}
      
       		index_pad=`printf  %03d $index`

       		out_seed_track=$out_track_dir/pathways/$index_pad.$label

		mean_matrix_line=""
		max_matrix_line=""
		for nifties in $(ls $out_seed_track/*/*.nii.gz) 
		do
			name=${nifties##*/}
			index=${name##*_}
			index=${index%%.*}
			th_img=$out_seed_track/$name.nii.gz
			fslmaths $nifties -div $nprobseeds -thr $threshold $th_img 
			nmaskvoxels=$(fslstats $th_img -V | awk '{print $1}')
			if [ "$nmaskvoxels" = "0" ]
			then
				mean_val=-1
				max_val=-1
			else

			fslmaths $matrix_nii -mas $th_img $th_img #Masking with the image
			
			if [ "$index" == "$index_pad" ]; then
				mean_val=1
				max_val=1
			else
			mean_val=$(fslstats $th_img -M | awk '{print $1}')  #Gets the non zero mean 
			max_val=$(fslstats $th_img -R | awk '{print $2}')   #Gets the maximum value and the min
			fi
			fi

			mean_matrix_line=${mean_matrix_line}${mean_val},
			max_matrix_line=${max_matrix_line}${max_val},
		
		done

	#remove trailing ,
	mean_matrix_line=${mean_matrix_line%,}	
	max_matrix_line=${max_matrix_line%,}	

echo $mean_matrix_line >> $out_matrix_mean_csv
echo $max_matrix_line >> $out_matrix_max_csv


    	done
	
echo "Connectivity (fraction of streamlines between each pair of seeds) written to: $out_conn_csv"   
echo "Mean $matrix in connected pathways written to: $out_matrix_mean_csv"
echo "Max $matrix in connected pathways written to: $out_matrix_max_csv"



    if [ -n "$scratch_dir" ] #if running on compute cluster, use scratch dir
    then
        pushd $scratch_dir/$subj
        echo "backing up scratch folder to $in_bedpost_root/$subj/$out_name.tar"
        tar -cf $in_bedpost_root/$subj/$out_name.tar $out_name
        popd
    fi

    else
	    echo "Connectivity output already exists for $subj, skipping.."
	    echo "   To force re-processing, remove: $out_conn_csv"
fi
