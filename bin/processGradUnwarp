#!/bin/bash

# precondition:  processRegT1

if [ "$#" -lt 4 ]
then
 echo " writes output to dwi/<input>_gradCorr"
 echo ""
 echo "Command-line Usage: $0 <in_dwi_name> <grad_coeff> <no_regT1?> <subjid>"
 exit 0
fi

output_dir=.

in_dwi=$1


grad_coeff=$2
noregT1=$3
shift 3


if [ -f $1 ]
then
 subjids=`cat $1`
else
 subjids=$1
fi


for subj in $subjids
do



subj_dir=$output_dir/$subj

if [ "$noregT1" = 1 ]
then
dwi_dir=$subj_dir/dwi/${in_dwi}
out_name=${in_dwi}_gradCorr
do_regT1=0
else
 # regT1 is enabled, then in_dwi has _regT1 suffixed
 regT1_dir=$subj_dir/dwi/${in_dwi}
 dwi_dir=${subj_dir}/dwi/${in_dwi%_regT1}
 do_regT1=1
fi

out_name=${in_dwi}_gradCorr


out_dir=$subj_dir/dwi/${out_name}
t1_dir=$subj_dir/t1

mkdir -p $out_dir

dwi_bvec=$dwi_dir/dwi.bvec
dwi_bval=$dwi_dir/dwi.bval
dwi_vol=$dwi_dir/dwi.nii.gz
brain_mask=$dwi_dir/brainmask.nii.gz

b0=$dwi_dir/dti_S0.nii.gz

epireg_work=$regT1_dir/epi_reg
xfm_b0_t1=$epireg_work/b0_to_t1.mat

 work=$out_dir/work
 mkdir -p $work


b0_t1_ref=$epireg_work/b0_t1space_diffres.nii.gz

#below was to crop out padding in dwi resampled to t1 space, but fslroi was not respecting phys space

#b0_t1_ref=$work/t1_ref.nii.gz
#crop tight around ref image
#echo flirt -applyxfm -in $b0 -out $b0_t1_ref -ref $t1_ref -interp nearestneighbour -v -init $xfm_b0_t1
#flirt -applyxfm -in $b0 -out $b0_t1_ref -ref $t1_ref -interp nearestneighbour -v -init $xfm_b0_t1
#croproi=`fslstats $b0_t1_ref -w`
#echo fslroi $b0_t1_ref $t1_ref $croproi 
#fslroi $b0_t1_ref $t1_ref $croproi 



 b0_unwarped=$work/b0_unwarped.nii.gz
 warp=$work/fullWarp.nii.gz
 warp_abs=$work/fullWarp_abs.nii.gz
 detjac=$work/detjac.nii.gz

 cp $b0 $work/b0.nii.gz
 cp $grad_coeff $work/coeff.grad
 #gradunwarp params -> same as default in gradcorrect app (for consistent warps)
 fov=0.2 #cm
 numpoints=150
 interporder=3
 


 #run gradunwarp
 pushd $work
  gradient_unwarp.py b0.nii.gz b0_unwarped.nii.gz siemens -g $grad_coeff -n --fovmin -$fov --fovmax $fov --numpoints $numpoints --verbose 
## for testing:
# singularity exec ~/singularity/khanlab_neuroglia-core_v1.0.1.img  gradient_unwarp.py b0.nii.gz b0_unwarped.nii.gz siemens -g coeff.grad -n --fovmin -$fov --fovmax $fov --numpoints $numpoints --verbose 
 popd

#get jacobian determinant
 echo reg_jacobian  -ref $b0_unwarped -def $warp_abs -jac $detjac
  reg_jacobian  -ref $b0_unwarped -def $warp_abs -jac $detjac


 
 jacobian=$work/fullWarp_jacobian.nii.gz
combined_warp=$work/fullWarp_to_t1.nii.gz
 echo convertwarp --abs --ref=$b0_unwarped --warp1=$warp_abs --relout --out=$warp --jacobian=$jacobian
 convertwarp --abs --ref=$b0_unwarped --warp1=$warp_abs --relout --out=$warp --jacobian=$jacobian

 if [ "$do_regT1" = 1 ]
 then
 echo convertwarp --rel --relout --warp1=$warp  --postmat=$xfm_b0_t1 --ref=$b0_t1_ref  --out=$combined_warp
 convertwarp --rel --relout --warp1=$warp  --postmat=$xfm_b0_t1 --ref=$b0_t1_ref  --out=$combined_warp
fi

 out_dwi_vol=$out_dir/dwi.nii.gz
 out_dwi_grad_dev=$out_dir/grad_dev.nii.gz
 out_brain_mask=$out_dir/brainmask.nii.gz

 if [ "$do_regT1" = 1 ]
 then

 echo applywarp --rel -i $dwi_vol -r $b0_t1_ref  -w $combined_warp --interp=spline -o $out_dwi_vol
 applywarp --rel -i $dwi_vol -r $b0_t1_ref  -w $combined_warp --interp=spline -o $out_dwi_vol
 
 if [ "$custom_brainmask" = "1" ]
 then
   # if custom_brainmask was used, then that brainmask (from regT1 dir) should be gradcorrected already
   # so, no need to compose T1 and gradunwarp, just need to resample regT1 brainmask into the same ref space (it might be already, but just to be safe..)
   regT1_brain_mask=$regT1_dir/brainmask.nii.gz
   echo reg_resample -flo $regT1_brain_mask -ref $b0_t1_ref -res $out_brain_mask -NN 0
   reg_resample -flo $regT1_brain_mask -ref $b0_t1_ref -res $out_brain_mask -NN 0

 else
   echo applywarp --rel -i $brain_mask -r $b0_t1_ref  -w $combined_warp --interp=nn -o $out_brain_mask
   applywarp --rel -i $brain_mask -r $b0_t1_ref  -w $combined_warp --interp=nn -o $out_brain_mask
 fi

 else

 echo applywarp --rel -i $dwi_vol -r $b0_unwarped  -w $warp --interp=spline -o $out_dwi_vol
 applywarp --rel -i $dwi_vol -r $b0_unwarped  -w $warp --interp=spline -o $out_dwi_vol
 echo applywarp --rel -i $brain_mask -r $b0_unwarped  -w $warp --interp=nn -o $out_brain_mask
 applywarp --rel -i $brain_mask -r $b0_unwarped  -w $warp --interp=nn -o $out_brain_mask

 fi

 #generate grad_dev file
grad_dev=$work/grad_dev.nii.gz
grad_dev_prefix=$work/grad_dev
  echo calc_grad_perc_dev --fullwarp=$warp -o $grad_dev_prefix
  calc_grad_perc_dev --fullwarp=$warp -o $grad_dev_prefix
  echo fslmerge -t $grad_dev ${grad_dev_prefix}_x ${grad_dev_prefix}_y ${grad_dev_prefix}_z
  fslmerge -t $grad_dev ${grad_dev_prefix}_x ${grad_dev_prefix}_y ${grad_dev_prefix}_z
  echo fslmaths $grad_dev -div 100 $grad_dev 
  fslmaths $grad_dev -div 100 $grad_dev 


if [ "$do_regT1" = 1 ]
 then

    echo vecreg_5.0.11 -i $grad_dev -o $out_dwi_grad_dev  -r $b0_t1_ref  -t $xfm_b0_t1 --interp=spline
    vecreg_5.0.11 -i $grad_dev -o $out_dwi_grad_dev  -r $b0_t1_ref  -t $xfm_b0_t1 --interp=spline
else
    cp -v $grad_dev $out_dwi_grad_dev

fi

    echo fslmaths $out_dwi_grad_dev -mas $out_brain_mask $out_dwi_grad_dev
    fslmaths $out_dwi_grad_dev -mas $out_brain_mask $out_dwi_grad_dev

if [ "$do_regT1" = 1 ]
 then

#rotate bvec
echo rotate_bvecs $dwi_bvec $xfm_b0_t1 $out_dir/dwi.bvec
rotate_bvecs $dwi_bvec $xfm_b0_t1 $out_dir/dwi.bvec


else
cp -v $dwi_bvec $out_dir/dwi.bvec
fi

#copy bval
echo cp $dwi_bval $out_dir/dwi.bval
cp $dwi_bval $out_dir/dwi.bval


dwi_bvec=$out_dir/dwi.bvec
dwi_bval=$out_dir/dwi.bval
dwi_vol=$out_dir/dwi.nii.gz
brain_mask=$out_dir/brainmask.nii.gz
grad_dev=$out_dir/grad_dev.nii.gz


if [ "$do_regT1" = 1 ]
then

#crop all tight around b0
roixyzt=`fslstats $b0_t1_ref -w`
roixyz=${roixyzt%0\ 1*} 
for nii in dwi brainmask grad_dev
do

echo fslroi $out_dir/$nii.nii.gz $out_dir/$nii.nii.gz  $roixyz
fslroi $out_dir/$nii.nii.gz $out_dir/$nii.nii.gz  $roixyz

done


fi


echo dtifit -k $dwi_vol -o $out_dir/dti -m $brain_mask -r $dwi_bvec -b $dwi_bval --gradnonlin=$grad_dev
dtifit -k $dwi_vol -o $out_dir/dti -m $brain_mask -r $dwi_bvec -b $dwi_bval --gradnonlin=$grad_dev


done
